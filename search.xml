<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>express4设置layout</title>
      <link href="/back-end/f4462e57.html"/>
      <url>/back-end/f4462e57.html</url>
      
        <content type="html"><![CDATA[<p>项目还没开始写，框架踩坑倒是一大推，看了2本与express有关的书，都是几年前的，有些api已经废弃，但是书里面有些内容解决了我现在的问题，在网上却很难找到解决问题的方法。<br>现在是2019年9月份，express中ejs模块已经不使用layout模板，我更加喜欢使用hbs，因为hbs看起来更清晰。<br>看书学习express，手打代码配置项目骨架，熟悉了基本操作之后使用的express-generator脚手架。<br>脚手架构建项目以hbs模板引擎为例，views文件里面有3个文件，其中一个是layout.hbs，默认全部路由都使用此模板。</p><h2 id="某个路由不使用模板"><a href="#某个路由不使用模板" class="headerlink" title="某个路由不使用模板"></a>某个路由不使用模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; </span><br><span class="line">      title: <span class="string">'Express'</span>,</span><br><span class="line">      layout: <span class="literal">null</span> </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h2 id="更换某个路由的模板"><a href="#更换某个路由的模板" class="headerlink" title="更换某个路由的模板"></a>更换某个路由的模板</h2><p>views下有admin.hbs模板，为路由设置此模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; </span><br><span class="line">      title: <span class="string">'Express'</span>,</span><br><span class="line">      layout: <span class="string">'admin'</span> </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="全局不使用模板"><a href="#全局不使用模板" class="headerlink" title="全局不使用模板"></a>全局不使用模板</h2><p>默认全部路由都使用<code>views/layout</code>模板，停止全部路由使用模板把layout设置为null：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'hbs'</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view options'</span>, &#123;</span><br><span class="line">  layout: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看书看到的。</p><h2 id="设置全局模板"><a href="#设置全局模板" class="headerlink" title="设置全局模板"></a>设置全局模板</h2><p>一个网站很多套模板，每天变着花样来玩，我的新模板是<code>/views/layouts/main.hbs</code>，今天用这个模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line">app.set(<span class="string">'view options'</span>, &#123;</span><br><span class="line">  layout: <span class="string">'/layouts/main'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express的format使用笔记</title>
      <link href="/back-end/5919f93c.html"/>
      <url>/back-end/5919f93c.html</url>
      
        <content type="html"><![CDATA[<p>res.format根据客户端的请求头，来响应不同的内容。<br>测试各种http请求，建议使用API调试工具Postman，省去写重复代码的时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/citys'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求头</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.headers.accept)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">var</span> citys = [&#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">"广州"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">"深圳"</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xml格式的数据</span></span><br><span class="line">    <span class="keyword">var</span> citysXml = <span class="string">'&lt;?xml version="1.0"?&gt;&lt;items&gt;'</span>+citys.map(<span class="function"><span class="keyword">function</span>(<span class="params">city</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;item id="'</span>+city.id+<span class="string">'"&gt;'</span>+city.name+<span class="string">'&lt;/item&gt;'</span></span><br><span class="line">    &#125;).join(<span class="string">''</span>) +<span class="string">'&lt;/items&gt;'</span>;</span><br><span class="line"></span><br><span class="line">    res.format(&#123;</span><br><span class="line">        <span class="string">'application/json'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            res.json(citys);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'text/plain'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            res.type(<span class="string">'text/plain'</span>);</span><br><span class="line">            res.send(citys);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'application/xml'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            res.type(<span class="string">'application/xml'</span>);</span><br><span class="line">            res.send(citysXml);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'text/xml'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            res.type(<span class="string">'text/xml'</span>);</span><br><span class="line">            res.send(citysXml);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'default'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 服务器端无法提供与  Accept-Charset 以及 Accept-Language 消息头指定的值相匹配的响应。</span></span><br><span class="line">            res.status(<span class="number">406</span>).send(<span class="string">'Not Acceptable'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>在res.format里面放了几个对象，它会根据当前客户端的请求头<code>accept</code>来响应，所以，在向服务器发起请求时，你（客户端）需要<strong>告诉服务器你希望接受的数据类型</strong>。<br>如果请求头没有设置<code>accept</code>，那么这个res.format会根据默认的类型响应。</p><p>向<code>127.0.0.1:3000/citys</code>发送GET请求，请求的数据类型是<code>&#39;Accept&#39;:&#39;application/json&#39;</code>，服务器返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;name&quot;: &quot;广州&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 2,</span><br><span class="line">        &quot;name&quot;: &quot;深圳&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>向<code>127.0.0.1:3000/citys</code>发送GET请求，请求的数据类型是<code>&#39;Accept&#39;:&#39;text/xml&#39;</code>，服务器返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;items&gt;</span><br><span class="line">    &lt;item id=&quot;1&quot;&gt;广州&lt;/item&gt;</span><br><span class="line">    &lt;item id=&quot;2&quot;&gt;深圳&lt;/item&gt;</span><br><span class="line">&lt;/items&gt;</span><br></pre></td></tr></table></figure><p>向<code>127.0.0.1:3000/citys</code>发送GET请求，请求的数据类型是<code>&#39;Accept&#39;:&#39;abc&#39;</code>，服务器返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not Acceptable</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/muzizongheng/article/details/46795243" target="_blank" rel="noopener">Http报头Accept与Content-Type的区别</a><br><a href="https://blog.csdn.net/fxbin123/article/details/80428216" target="_blank" rel="noopener">Postman 使用方法详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express重置项目！</title>
      <link href="/back-end/33f9d94.html"/>
      <url>/back-end/33f9d94.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原标题是《express切换模板引擎》，后来发现不对！我把项目重置了，写的代码没有了。</p></blockquote><p>之前我按照《node.js开发指南》书里面使用<code>express -t ejs microblog</code>命令构建工程，当我使用<code>npm install</code>安装依赖时，命令行提示：</p><blockquote><p>Jade has been renamed to pug, please install the latest version of pug instead of jade</p></blockquote><p>因为模板引擎 Jade 改名为 Pug，作者说Jade这个名字是一个软件的商标，如果不改名很有可能会面临起诉。</p><p>项目配置文件package.json还是使用jade这个名字。</p><p>打开项目views视图文件后缀是jade，百度才知道现在express的版本不使用-t这个命令了，<code>express -t ejs microblog</code>这句话不会构建出ejs后缀的视图，默认给我选了jade后缀。</p><p><strong>这方法只针对未开发的项目，开发过的项目不要模仿！</strong><br><strong>如果是新构建的项目骨架，可以使用这个方法，如果是已经在开发的项目，就不要这样做，因为以下操作会把项目重置！</strong><br><strong>所有代码会丢失，初始化项目骨架！</strong></p><h2 id="重置项目文件，强行将jade改为ejs"><a href="#重置项目文件，强行将jade改为ejs" class="headerlink" title="重置项目文件，强行将jade改为ejs"></a>重置项目文件，强行将jade改为ejs</h2><p>查看帮助，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -h</span><br></pre></td></tr></table></figure><p>可以看到以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Usage: express [options] [dir]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">      --version        output the version number</span><br><span class="line">  -e, --ejs            add ejs engine support</span><br><span class="line">      --pug            add pug engine support</span><br><span class="line">      --hbs            add handlebars engine support</span><br><span class="line">  -H, --hogan          add hogan.js engine support</span><br><span class="line">  -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)</span><br><span class="line">      --no-view        use static html instead of view engine</span><br><span class="line">  -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</span><br><span class="line">      --git            add .gitignore</span><br><span class="line">  -f, --force          force on non-empty directory</span><br><span class="line">  -h, --help           output usage information</span><br></pre></td></tr></table></figure><p>注意可以改成ejs,pub,hbs这三种其中一种。</p><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -ejs</span><br></pre></td></tr></table></figure><p>此时提示 ‘destination is not empty, continue?[y/N]’，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y</span><br></pre></td></tr></table></figure><p>就改成ejs了，打开app.js，里面的<code>app.set(&#39;view engine&#39;, &#39;jade&#39;)</code>变成了<code>app.set(&#39;view engine&#39;, &#39;ejs&#39;)</code>，views文件夹下多了几个ejs后缀的文件。</p><p>建议再安装一次依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=microblog:* npm start</span><br></pre></td></tr></table></figure><p>打开浏览器<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express </tag>
            
            <tag> ejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装express</title>
      <link href="/back-end/46777998.html"/>
      <url>/back-end/46777998.html</url>
      
        <content type="html"><![CDATA[<p>在看《node.js开发指南》，看到安装express，这本书是几年前的，内容可能有点旧，书里面的教程和现实存在一点差异，所以我要去网上找安装express的方法。</p><h2 id="安装expre"><a href="#安装expre" class="headerlink" title="安装expre"></a>安装expre</h2><p>打开命令行工具，全局安装expre：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express</span><br></pre></td></tr></table></figure><p>全局安装命令工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express-generator</span><br></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --version</span><br></pre></td></tr></table></figure><p>查看帮助信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --help</span><br></pre></td></tr></table></figure><h2 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h2><p>在你的工程目录下运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express microblog -e</span><br></pre></td></tr></table></figure><p>以上命令创建一个名为microblog的web项目，-e表示创建项目的视图文件的后缀为.ejs。</p><p>构建完会提示你：</p><blockquote><p> change directory:<br>     $ cd microblog<br>   install dependencies:<br>     $ npm install<br>   run the app:<br>     $ DEBUG=microblog:* npm start</p></blockquote><p>依次执行提示的命令，就是进去项目里面安装依赖，然后打开服务。</p><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd microblog</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=microblog:* npm start</span><br></pre></td></tr></table></figure><p>打开浏览器<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> express </tag>
            
            <tag> ejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具util</title>
      <link href="/back-end/fc5f22b.html"/>
      <url>/back-end/fc5f22b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘自《NodeJs开发指南》</p></blockquote><p>util 是一个 Node.js 核心模块，提供常用函数的集合，用于弥补核心 JavaScript 的功能过于精简的不足。</p><h2 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h2><p>util.inherits(constructor, superConstructor)是一个实现对象间原型继承的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'base'</span>;</span><br><span class="line">    <span class="keyword">this</span>.base = <span class="number">1991</span>;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sub'</span>;</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Sub, Base);</span><br><span class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base();</span><br><span class="line">objBase.showName();</span><br><span class="line">objBase.sayHello();</span><br><span class="line"><span class="built_in">console</span>.log(objBase);</span><br><span class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub();</span><br><span class="line">objSub.showName();</span><br><span class="line"><span class="comment">//objSub.sayHello(); </span></span><br><span class="line"><span class="built_in">console</span>.log(objSub);</span><br></pre></td></tr></table></figure><blockquote><p>base<br>Hello base<br>{ name: ‘base’, base: 1991, sayHello: [Function] }<br>sub<br>{ name: ‘sub’ }</p></blockquote><p>注意，Sub 仅仅继承了 Base 在原型中定义的函数，而构造函数内部创造的 base 属<br>性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被 console.log 作<br>为对象的属性输出。</p><h2 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h2><p>util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转<strong>换为字符串</strong>的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。</p><ul><li>showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。</li><li>depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多<br>少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。</li><li>color 值为 true，输出格式将会以 ANSI 颜色编码，通常用于在终端显示更漂亮<br>的效果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'byvoid'</span>; </span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">    &#125;; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(); </span><br><span class="line"><span class="built_in">console</span>.log(util.inspect(obj)); </span><br><span class="line"><span class="built_in">console</span>.log(util.inspect(obj, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure><p>运行结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: &apos;byvoid&apos;, toString: [Function] &#125; </span><br><span class="line">&#123; toString: </span><br><span class="line"> &#123; [Function] </span><br><span class="line"> [prototype]: &#123; [constructor]: [Circular] &#125;, </span><br><span class="line"> [caller]: null, </span><br><span class="line"> [length]: 0, </span><br><span class="line"> [name]: &apos;&apos;, </span><br><span class="line"> [arguments]: null &#125;, </span><br><span class="line"> name: &apos;byvoid&apos; &#125;</span><br></pre></td></tr></table></figure><p>更多<a href="http://nodejs.cn/api/util.html" target="_blank" rel="noopener">http://nodejs.cn/api/util.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> noe.js </tag>
            
            <tag> util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP客户端</title>
      <link href="/back-end/dfbfd615.html"/>
      <url>/back-end/dfbfd615.html</url>
      
        <content type="html"><![CDATA[<p>http 模块提供了两个函数 http.request 和 http.get，功能是作为客户端向 HTTP 服务器发起请求。</p><h2 id="http-request"><a href="#http-request" class="headerlink" title="http.request"></a>http.request</h2><p>http.request(options, callback)<br>option 参数如下所示。</p><ul><li>host ：请求网站的域名或 IP 地址。</li><li>port ：请求网站的端口，默认 80。</li><li>method ：请求方法，默认是 GET。</li><li>path ：请求的相对于根的路径，默认是“/”。QueryString 应该包含在其中。例如 /search?query=byvoid。</li><li>headers ：一个关联数组对象，为请求头的内容。</li></ul><p>callback 传递一个参数，为 http.ClientResponse 的实例。<br>http.request 返回一个 http.ClientRequest 的实例。</p><h3 id="通过-http-request-发送-POST-请求"><a href="#通过-http-request-发送-POST-请求" class="headerlink" title="通过 http.request 发送 POST 请求"></a>通过 http.request 发送 POST 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// httprequest.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于url参数对象转化为url参数字符串</span></span><br><span class="line"><span class="keyword">var</span> contents = querystring.stringify(&#123;</span><br><span class="line">    name: <span class="string">'小红'</span>,</span><br><span class="line">    email: <span class="string">'123@qq.com'</span>,</span><br><span class="line">    address: <span class="string">'广州'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="string">'3000'</span>,</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">        <span class="string">'Content-Length'</span>: contents.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">req.write(contents);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><h3 id="通过-http-request-发送-GET-请求"><a href="#通过-http-request-发送-GET-请求" class="headerlink" title="通过 http.request 发送 GET 请求"></a>通过 http.request 发送 GET 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端发起get</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是需要提交的数据  </span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'小花'</span>,</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于url参数对象转化为url参数字符串</span></span><br><span class="line"><span class="keyword">var</span> content = querystring.stringify(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    path: <span class="string">'/test?'</span> + content,</span><br><span class="line">    method: <span class="string">'GET'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'BODY: '</span> + chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'problem with request: '</span> + e.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><h2 id="http-get"><a href="#http-get" class="headerlink" title="http.get"></a>http.get</h2><h3 id="通过-http-get-发送-GET-请求"><a href="#通过-http-get-发送-GET-请求" class="headerlink" title="通过 http.get 发送 GET 请求"></a>通过 http.get 发送 GET 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); </span><br><span class="line">http.get(&#123;<span class="attr">host</span>: <span class="string">'www.baidu.com'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123; </span><br><span class="line"> res.setEncoding(<span class="string">'utf8'</span>); </span><br><span class="line"> res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(data); </span><br><span class="line"> &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> http客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>querystring.stringify和JSON.stringify的区别</title>
      <link href="/back-end/c0182012.html"/>
      <url>/back-end/c0182012.html</url>
      
        <content type="html"><![CDATA[<p>学习node.js，使用querystring模块产生的疑问，querystring.stringify和JSON.stringify的区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"goodboy"</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用stringify将obj准换"><a href="#使用stringify将obj准换" class="headerlink" title="使用stringify将obj准换"></a>使用stringify将obj准换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url参数对象转化为url参数字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(querystring.stringify(obj));</span><br><span class="line"><span class="comment">// name=goodboy&amp;age=18</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json对象转换成字符串对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="comment">// &#123;"name":"goodboy","age":18&#125;</span></span><br></pre></td></tr></table></figure><h2 id="使用parse转换之前各自转换的结果"><a href="#使用parse转换之前各自转换的结果" class="headerlink" title="使用parse转换之前各自转换的结果"></a>使用parse转换之前各自转换的结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url参数字符串转化为url参数对象</span></span><br><span class="line"><span class="built_in">console</span>.log(querystring.parse(<span class="string">'name=goodboy&amp;age=18'</span>)); </span><br><span class="line"><span class="comment">// 注意：数字返回的是字符串类型!</span></span><br><span class="line"><span class="comment">// &#123; name: 'goodboy', age: '18' &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串对象转换成json对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"goodboy","age":18&#125;'</span>));</span><br><span class="line"><span class="comment">// &#123; name: 'goodboy', age: 18 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exports与moudle.exports</title>
      <link href="/back-end/2fe02dea.html"/>
      <url>/back-end/2fe02dea.html</url>
      
        <content type="html"><![CDATA[<h2 id="exports与moudle-exports"><a href="#exports与moudle-exports" class="headerlink" title="exports与moudle.exports"></a>exports与moudle.exports</h2><p>node.js中exports与moudle.exports的区别：</p><ul><li><strong>exports</strong>公开模块接口，通过require调用此模块，<strong>可以直接访问</strong>此模块中exports对象的成员函数。</li><li><strong>moudle.exports</strong>输出对象本身，通过require调用此模块<strong>需要实例化之后才可以调用</strong>。</li></ul><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><blockquote><p>exports是module.exports的一个引用，exports指向的是module.exports。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line">exports.setName = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    name = str;</span><br><span class="line">&#125;;</span><br><span class="line">exports.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>+name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span>  hello1 = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line"><span class="comment">// 可以直接调用模块中exports对象的成员函数</span></span><br><span class="line">hello1.setName(<span class="string">'jack'</span>);</span><br><span class="line">hello1.sayHello();</span><br></pre></td></tr></table></figure><hr><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><blockquote><p>module.exports 输出 对象本身，它是一个类。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moudle.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">        name = thyName;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = Hello; <span class="comment">// 输出对象本身</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> moudleHello = <span class="built_in">require</span>(<span class="string">'./moudle'</span>);</span><br><span class="line"><span class="comment">// 需要实例化才可以调用 </span></span><br><span class="line">hello2 = <span class="keyword">new</span> moudleHello();</span><br><span class="line">hello2.setName(<span class="string">'tom'</span>); </span><br><span class="line">hello2.sayHello();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> moudle.exports </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo设置特定文件不使用模板渲染</title>
      <link href="/mixture/224b403e.html"/>
      <url>/mixture/224b403e.html</url>
      
        <content type="html"><![CDATA[<h2 id="不使用模板渲染文章"><a href="#不使用模板渲染文章" class="headerlink" title="不使用模板渲染文章"></a>不使用模板渲染文章</h2><p>把md文章文件头部<code>layout</code>设置为<code>false</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 此文章不使用模板渲染</span><br><span class="line">categories: hexo</span><br><span class="line">date: 2019-09-18 12:25:57</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这个方法一般不会使用，很不美观。</p><h2 id="不使用模板渲染目录或文件"><a href="#不使用模板渲染目录或文件" class="headerlink" title="不使用模板渲染目录或文件"></a>不使用模板渲染目录或文件</h2><p>Hexo默认会对<code>/source/</code>里的所有页面应用主题模板渲染。<br>有时候，我需要展示我写的html页面，需要一个干净的页面，关闭模板渲染。<br>我的html、css、js、image放在<code>/source/assets/</code>。<br>打开根目录下的<code>_config.yml</code>，搜索<code>skip_render</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: assets/**</span><br></pre></td></tr></table></figure><p><code>assets/**</code>表示<strong>不使用模板渲染</strong>此目录下所有的文件，跳过单独文件可以写<code>assets/index.html</code></p><h3 id="如何访问？"><a href="#如何访问？" class="headerlink" title="如何访问？"></a>如何访问？</h3><p>我的文件目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- source</span><br><span class="line">    - assets</span><br><span class="line">       index.html</span><br><span class="line">       style.css</span><br><span class="line">       main.js</span><br><span class="line">       photo.jpg</span><br></pre></td></tr></table></figure><ol><li>在浏览器打开：<a href="http://localhost:4000/assets/index.html" target="_blank" rel="noopener">http://localhost:4000/assets/index.html</a></li><li>在文章内引用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://localhost:4000/assets/index.html&gt;</span><br><span class="line">[这是我的demo首页](/assets/index.html)</span><br><span class="line">![这是我的图片](/assets/photo.jpg)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 混合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rem自适应布局</title>
      <link href="/front-end/5a82277e.html"/>
      <url>/front-end/5a82277e.html</url>
      
        <content type="html"><![CDATA[<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>rem是CSS3新增的相对长度单位，是指相对于根元素html的font-size计算值的大小。简单可理解为屏幕宽度的百分比。</p><p>写代码时，按照设计稿的尺寸对应转换单位成rem。一般我使用宽750px的设计稿，除以100是为了方便计算。设计稿上元素宽度50px，在css里面就是50/100=0.5rem。设计稿里面元素宽度750px，在css里面就写7.5rem，在任何尺寸上这个7.5rem刚刚好是屏幕的宽度，网页按照设计稿比例布局！</p><p><code>DOMContentLoaded</code>，文档加载完成计算根字体大小。</p><p><code>resize</code>，监听网页可视宽度变化，动态设置html的根字体大小，因为网页按照设计稿比例来布局，屏幕窗口改变，根字体大小重新计算。</p><h2 id="实现rem自适应布局"><a href="#实现rem自适应布局" class="headerlink" title="实现rem自适应布局"></a>实现rem自适应布局</h2><p>核心代码就这几句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">! function (n) &#123;</span><br><span class="line">    var doc = n.document,</span><br><span class="line">        el = doc.documentElement,</span><br><span class="line">        designW = 750,</span><br><span class="line">        p = designW / 100,</span><br><span class="line">        event = &quot;orientationchange&quot; in n ? &quot;orientationchange&quot; : &quot;resize&quot;,</span><br><span class="line">        fun = function () &#123;</span><br><span class="line">            var clientW = el.clientWidth&lt;320?320:el.clientWidth;</span><br><span class="line">            el.style.fontSize = clientW / p + &quot;px&quot;</span><br><span class="line">            console.log(clientW / p)</span><br><span class="line">        &#125;;</span><br><span class="line">    doc.addEventListener &amp;&amp; (n.addEventListener(event, fun, false), doc.addEventListener(&quot;DOMContentLoaded&quot;, fun,</span><br><span class="line">        false))</span><br><span class="line">&#125;(window);</span><br></pre></td></tr></table></figure><p><a href="/assets/rem/index.html">在线demo</a>，按f12，尝试在不同屏幕大小的设备中展示。<br>demo的css：<a href="/assets/rem/css/style.css">style.css</a>，<a href="/assets/rem/css/iconfont.css">iconfont.css</a></p><p>设计图：</p><p><img src="/assets/rem/design-750.png" alt></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>在不同的尺寸上布局是等比例了，但是元素字体大小我使用的是em，大屏幕上字体显得很小，如果用rem作为字体大小单位，可以等比例变大缩小。 demo中menu的iconfont图标就是使用rem作为字体大小单位。<br>我给body设置字体为16px，设计稿上面的标注24px的字体，转换成em公式24px/2/16px=0.75em，因为设计稿宽度是按照实际宽度375px*2的。<br>这样子转换我不知道对错，反正我自己是这样用。</p></li><li><p>在屏幕小于320px的时候，元素放不下会挤开，所以我在demo中设置了根字体最小也要按照320px的宽度转换。</p></li><li><p>document：.html文档;<br>documentElement：整个节点树的根节点root，即&lt;html&gt; 标签;<br>body：DOM对象里的body子节点，即 &lt;body&gt; 标签;</p></li><li><p>&lt;!DOCTYPE html&gt;相关说明<a href="https://blog.csdn.net/zxf13598202302/article/details/51162637" target="_blank" rel="noopener">https://blog.csdn.net/zxf13598202302/article/details/51162637</a>：<br>页面具有 DTD，或者说指定了 DOCTYPE 时，使用 document.documentElement。<br>页面不具有 DTD，或者说没有指定了 DOCTYPE 时，使用 document.body。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rem </tag>
            
            <tag> 自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10系统启用telnet服务</title>
      <link href="/mixture/a80cf7e4.html"/>
      <url>/mixture/a80cf7e4.html</url>
      
        <content type="html"><![CDATA[<p>在学习node.js创建TCP服务器，需要与被创建的TCP服务器连接，在另一个命令窗口执行以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 8431</span><br></pre></td></tr></table></figure><p>然后报：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet: command not found</span><br></pre></td></tr></table></figure><p>原因是windows 10 系统没有启用telnet客户端，需要手动开启</p><h2 id="启用telnet客户端"><a href="#启用telnet客户端" class="headerlink" title="启用telnet客户端"></a>启用telnet客户端</h2><p>右击win键-&gt;应用与功能-&gt;程序与功能-&gt;启用或关闭widows功能-&gt;勾选telnet客户端</p><p><img src="/images/20190915160312.jpg" alt><br><img src="/images/20190915155819.jpg" alt><br><img src="/images/20190915155957.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 混合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> telnet </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js学习笔记（二）</title>
      <link href="/back-end/94441cf.html"/>
      <url>/back-end/94441cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h2><h3 id="使用ReadStream对象读取文件"><a href="#使用ReadStream对象读取文件" class="headerlink" title="使用ReadStream对象读取文件"></a>使用ReadStream对象读取文件</h3><blockquote><p>fs.createReadStream(path,[option])</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./msg.txt'</span>,&#123;<span class="attr">start</span>:<span class="number">3</span>,<span class="attr">end</span>:<span class="number">12</span>&#125;);</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件已经全部读取完毕"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件被关闭"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="暂停并恢复文件的读取"><a href="#暂停并恢复文件的读取" class="headerlink" title="暂停并恢复文件的读取"></a>暂停并恢复文件的读取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./msg.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"暂停读取..."</span>)</span><br><span class="line"><span class="comment">// 暂停读取</span></span><br><span class="line">file.pause();</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'获取到数据：'</span>+data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 恢复读取</span></span><br><span class="line">    file.resume();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"恢复读取..."</span>)</span><br><span class="line">&#125;,<span class="number">4000</span>);</span><br></pre></td></tr></table></figure><h3 id="使用-createWriteStream-方法写入文件"><a href="#使用-createWriteStream-方法写入文件" class="headerlink" title="使用 createWriteStream 方法写入文件"></a>使用 createWriteStream 方法写入文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./msg.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'anothermsg.txt'</span>);</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// writable.write([chunk],[encoding],[callback]);</span></span><br><span class="line">    out.write(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">out.on(<span class="string">'open'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'需要被写入的文件已被打开'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// writable.end([chunk],[encoding],[callback])</span></span><br><span class="line">    <span class="comment">// '再见'会追加到anothermsg.txt末尾</span></span><br><span class="line">    out.end(<span class="string">'再见'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件全部写入完毕，字节：'</span>,out.bytesWritten);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-WriteStream-对象的write-方法中的callback参数指定回调函数"><a href="#使用-WriteStream-对象的write-方法中的callback参数指定回调函数" class="headerlink" title="使用 WriteStream 对象的write 方法中的callback参数指定回调函数"></a>使用 WriteStream 对象的write 方法中的callback参数指定回调函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./msg.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'anothermsg.txt'</span>);</span><br><span class="line"></span><br><span class="line">file.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// writable.write([chunk],[encoding],[callback]);</span></span><br><span class="line">    out.write(data,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="观察-WriteStream-对象的write-方法的返回结果并监听drain事件"><a href="#观察-WriteStream-对象的write-方法的返回结果并监听drain事件" class="headerlink" title="观察 WriteStream 对象的write 方法的返回结果并监听drain事件"></a>观察 WriteStream 对象的write 方法的返回结果并监听drain事件</h3><p>当操作系统缓存区中的数据全部写满时，不代表不能继续写数据。<br>而是指在将操作系统<strong>缓存区</strong>中的数据<strong>写入</strong>到<strong>文件</strong>中的<strong>同时把读取到的数据暂时缓存在内存中</strong>，待操作系统缓存区数据已全部输出时首先将内存中缓存的数据读入操作系统缓存区中。<br>当操作系统缓存区中的数据已被全部读出并写入到目标文件时，触发WriteStream对象的drain事件，表示操作统缓存区中的数据已被全部读出，可以继续向操作系统缓存区中写入新的数据。</p><blockquote><p>drain事件触发<br>操作系统缓存区数据写满，返回 false,<br>操作系统缓存区还可以写入数据，返回 true</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'test1.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = out.write(i.toString());</span><br><span class="line">    <span class="built_in">console</span>.log(flag); <span class="comment">// 操作系统缓存区数据写满 false, 操作系统缓存区还可以写入数据 true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'操作系统缓存区中的数据已被全部输出,1'</span>);</span><br><span class="line">    <span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'test2.txt'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> flag = out.write(i.toString());</span><br><span class="line">        <span class="built_in">console</span>.log(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.on(<span class="string">'drain'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 这里的drain事件不会被触发，因为1-10个数据不会填满操作系统缓存区</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'操作系统缓存区中的数据已被全部输出,2'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="error事件回调函数的使用"><a href="#error事件回调函数的使用" class="headerlink" title="error事件回调函数的使用"></a>error事件回调函数的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'msg.txt'</span>);</span><br><span class="line"></span><br><span class="line">out.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写文件操作发生错误'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">out.write(<span class="string">'一些测试数据'</span>);</span><br><span class="line">out.end();</span><br><span class="line">out.write(<span class="string">'一些新数据'</span>); <span class="comment">// 该行代码将引起一个操作错误</span></span><br></pre></td></tr></table></figure><h3 id="使用pipe方法复制文件"><a href="#使用pipe方法复制文件" class="headerlink" title="使用pipe方法复制文件"></a>使用pipe方法复制文件</h3><blockquote><p>readStream.pipe(destination,[option]);</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./msg.mp3'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'./anothermsg.mp3'</span>);</span><br><span class="line"><span class="comment">// msg.mp3复制到anothermsg.mp3</span></span><br><span class="line">file.pipe(out);</span><br></pre></td></tr></table></figure><h3 id="将end属性值设置为false以在目标文件中追加数据"><a href="#将end属性值设置为false以在目标文件中追加数据" class="headerlink" title="将end属性值设置为false以在目标文件中追加数据"></a>将end属性值设置为false以在目标文件中追加数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./msg.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'./anothermsg.txt'</span>);</span><br><span class="line"><span class="comment">// msg.txt复制到anothermsg.txt</span></span><br><span class="line">file.pipe(out,&#123;<span class="attr">end</span>:<span class="literal">false</span>&#125;);</span><br><span class="line">file.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// '再见。'追加到anothermsg.txt末尾</span></span><br><span class="line">    out.end(<span class="string">'再见。'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用unpipe方法取消目标文件写入操作"><a href="#使用unpipe方法取消目标文件写入操作" class="headerlink" title="使用unpipe方法取消目标文件写入操作"></a>使用unpipe方法取消目标文件写入操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> file = fs.createReadStream(<span class="string">'./test1.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'./anothertest.txt'</span>);</span><br><span class="line">file.pipe(out,&#123;<span class="attr">end</span>:<span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    file.unpipe(out);</span><br><span class="line">    out.end();</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js学习笔记</title>
      <link href="/back-end/3c2bd137.html"/>
      <url>/back-end/3c2bd137.html</url>
      
        <content type="html"><![CDATA[<h2 id="判断是否主模块"><a href="#判断是否主模块" class="headerlink" title="判断是否主模块"></a>判断是否主模块</h2><p>在模块中写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">module</span> === <span class="built_in">require</span>.main;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// true 主模块，false 非主模块</span></span><br></pre></td></tr></table></figure><p>例如：node app.js<br>那么，app.js就是主模块</p><h2 id="引用同一个模块不会引起模块内的代码多次运行"><a href="#引用同一个模块不会引起模块内的代码多次运行" class="headerlink" title="引用同一个模块不会引起模块内的代码多次运行"></a>引用同一个模块不会引起模块内的代码多次运行</h2><p>引入模块，加载模块时会执行模块里面的全部代码，模块加载后将缓存到内存缓存区中，<br>主模块多次引用同一个模块不会引起模块内的代码多次运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = <span class="built_in">require</span>(<span class="string">'./testModule.js'</span>);</span><br><span class="line"><span class="keyword">var</span> test2 = <span class="built_in">require</span>(<span class="string">'./testModule.js'</span>);</span><br><span class="line"><span class="keyword">var</span> test3 = <span class="built_in">require</span>(<span class="string">'./testModule.js'</span>);</span><br></pre></td></tr></table></figure><h2 id="获取模块文件名和当前目录"><a href="#获取模块文件名和当前目录" class="headerlink" title="获取模块文件名和当前目录"></a>获取模块文件名和当前目录</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"获取模块文件名:"</span>,__filename)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"获取当前目录:"</span>,__dirname)</span><br></pre></td></tr></table></figure><h2 id="取消事件的所有事件处理函数"><a href="#取消事件的所有事件处理函数" class="headerlink" title="取消事件的所有事件处理函数"></a>取消事件的所有事件处理函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url !== <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"收到客户端请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不处理收藏加图标的请求</span></span><br><span class="line">    <span class="keyword">if</span> (req.url !== <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    &#125;</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消'request'事件的所有事件处理函数</span></span><br><span class="line">server.removeAllListeners(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url !== <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'你可以在控制台看到这句'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">1234</span>, <span class="string">"127.0.0.1"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>removeAllListeners方法中使用事件名称参数时，将取消该事件的所有事件处理函数<br>removeAllListeners方法中不使用事件名称参数时，将取消所有已被指定的事件</p></blockquote><h2 id="查看npm包全局安装路径"><a href="#查看npm包全局安装路径" class="headerlink" title="查看npm包全局安装路径"></a>查看npm包全局安装路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure><h2 id="修改全局安装路径"><a href="#修改全局安装路径" class="headerlink" title="修改全局安装路径"></a>修改全局安装路径</h2><p>修改到 <code>d:\node\node_module</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npmconfig set prefix &quot;d:\node&quot;</span><br></pre></td></tr></table></figure><h2 id="文件读写参数"><a href="#文件读写参数" class="headerlink" title="文件读写参数"></a>文件读写参数</h2><p>‘r’：读取文件．如果文件不存在则抛出异常。<br>‘r+’：读取并写入文件，如果文件不存在则抛出异常。<br>‘rs’：以同步方式读取文件并通知操作系统忽略本地文件系统缓存．如果文件不存在则抛出异常。由于该属性值的使用将使操作系统忽略本地文件系统缓存机制，因此在操作网络文件系统时建议使用该属性值，但由于其对性能产生一定的负面影响．所以在其他场合下不建议使用。<br>‘w’：写人文件。如果文件不存在则创建该文件，如果该文件已存在则清空文件内容。<br>‘wx’：作用与W类似，但是如果文件路径存在，则文件写入失败。<br>‘w+’：读取并写人文件。如果文件不存在则创建该文件，如果该文件巳存在则清空文件内容。<br>‘wx+’： 作用与’w+’类似，则文件读写失败。<br>‘a’：追加写人文件。如果文件不存在则创建该文件。<br>‘ax’：作用与’a’类似，但是如果文件路径存在，则文件追加失败。<br>‘a+’：读取并追加写人文件，如果文件存在则创建该文件 。<br>‘ax+’：类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。</p><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><blockquote><p>看书看不懂Buffer怎么使用，去官网或者菜鸟教程看一遍。<br>node.js中文文档-buffer：<a href="http://nodejs.cn/api/buffer.html" target="_blank" rel="noopener">http://nodejs.cn/api/buffer.html</a><br>菜鸟教程-Node.js Buffer(缓冲区)：<a href="https://www.runoob.com/nodejs/nodejs-buffer.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-buffer.html</a></p></blockquote><p>Buffer类用来创建一个专门存放二进制数据的缓存区。</p><p>在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 Node.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer 类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。</p><blockquote><p>在v6.0之前创建Buffer对象直接使用new Buffer()构造函数来创建对象实例，但是Buffer对内存的权限操作相比很大，可以直接捕获一些敏感信息，所以在v6.0以后，官方文档里面建议使用 Buffer.from() 接口去创建Buffer对象。</p></blockquote><h3 id="Buffer-与字符编码"><a href="#Buffer-与字符编码" class="headerlink" title="Buffer 与字符编码"></a>Buffer 与字符编码</h3><p>Buffer 实例一般用于表示编码字符的序列，比如 UTF-8 、 UCS2 、 Base64 、或十六进制编码的数据。 通过使用显式的字符编码，就可以在 Buffer 实例与普通的 JavaScript 字符串之间进行相互转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'runoob'</span>, <span class="string">'ascii'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 72756e6f6f62</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'hex'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 cnVub29i</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'base64'</span>));</span><br></pre></td></tr></table></figure><p><strong>Node.js 目前支持的字符编码包括：</strong></p><ul><li><p>ascii - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</p></li><li><p>utf8 - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</p></li><li><p>utf16le - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</p></li><li><p>ucs2 - utf16le 的别名。</p></li><li><p>base64 - Base64 编码。</p></li><li><p>latin1 - 一种把 Buffer 编码成一字节编码的字符串的方式。</p></li><li><p>binary - latin1 的别名。</p></li><li><p>hex - 将每个字节编码为两个十六进制字符。</p></li></ul><h3 id="创建-Buffer-类"><a href="#创建-Buffer-类" class="headerlink" title="创建 Buffer 类"></a>创建 Buffer 类</h3><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ul><li>Buffer.alloc(size[, fill[, encoding]])： 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li>Buffer.allocUnsafe(size)： 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li>Buffer.allocUnsafeSlow(size)</li><li>Buffer.from(array)： 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li>Buffer.from(arrayBuffer[, byteOffset[, length]])： 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</li><li>Buffer.from(buffer)： 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li>Buffer.from(string[, encoding])： 返回一个被 string 的值初始化的新的 Buffer 实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为 10、且用 0 填充的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.alloc(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且未初始化的 Buffer。</span></span><br><span class="line"><span class="comment">// 这个方法比调用 Buffer.alloc() 更快，</span></span><br><span class="line"><span class="comment">// 但返回的 Buffer 实例可能包含旧数据，</span></span><br><span class="line"><span class="comment">// 因此需要使用 fill() 或 write() 重写。</span></span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.allocUnsafe(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf4 = Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf5 = Buffer.from(<span class="string">'tést'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf6 = Buffer.from(<span class="string">'tést'</span>, <span class="string">'latin1'</span>);</span><br></pre></td></tr></table></figure><h3 id="写入缓冲区"><a href="#写入缓冲区" class="headerlink" title="写入缓冲区"></a>写入缓冲区</h3><p><strong>语法</strong><br>写入 Node 缓冲区的语法如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br>参数描述如下：</p><ul><li><p>string - 写入缓冲区的字符串。</p></li><li><p>offset - 缓冲区开始写入的索引值，默认为 0 。</p></li><li><p>length - 写入的字节数，默认为 buffer.length</p></li><li><p>encoding - 使用的编码。默认为 ‘utf8’ 。</p></li></ul><p>根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><p><strong>返回值</strong><br>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p><p><strong>实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(<span class="number">256</span>);</span><br><span class="line">len = buf.write(<span class="string">"www.runoob.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"写入字节数 : "</span>+  len); <span class="comment">// 写入字节数 : 14</span></span><br></pre></td></tr></table></figure><h3 id="从缓冲区读取数据"><a href="#从缓冲区读取数据" class="headerlink" title="从缓冲区读取数据"></a>从缓冲区读取数据</h3><p><strong>语法</strong><br>读取 Node 缓冲区数据的语法如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.toString([encoding[, start[, end]]])</span><br></pre></td></tr></table></figure><p><strong>参数</strong><br>参数描述如下：</p><ul><li><p>encoding - 使用的编码。默认为 ‘utf8’ 。</p></li><li><p>start - 指定开始读取的索引位置，默认为 0。</p></li><li><p>end - 结束位置，默认为缓冲区的末尾。</p></li></ul><p><strong>返回值</strong><br>解码缓冲区数据并使用指定的编码返回字符串。</p><p><strong>实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">26</span> ; i++) &#123;</span><br><span class="line">  buf[i] = i + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="string">'ascii'</span>));       <span class="comment">// 输出: abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="string">'ascii'</span>,<span class="number">0</span>,<span class="number">5</span>));   <span class="comment">// 输出: abcde</span></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="string">'utf8'</span>,<span class="number">0</span>,<span class="number">5</span>));    <span class="comment">// 输出: abcde</span></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="literal">undefined</span>,<span class="number">0</span>,<span class="number">5</span>)); <span class="comment">// 使用 'utf8' 编码, 并输出: abcde</span></span><br></pre></td></tr></table></figure><h2 id="将缓冲区内数据用fs-write写入使用fs-open打开的文件"><a href="#将缓冲区内数据用fs-write写入使用fs-open打开的文件" class="headerlink" title="将缓冲区内数据用fs.write写入使用fs.open打开的文件"></a>将缓冲区内数据用fs.write写入使用fs.open打开的文件</h2><blockquote><p>fs.write(fd, buffer[, offset[, length[, position]]], callback)<br>fs.write文档：<a href="http://nodejs.cn/api/fs.html#fs_fs_write_fd_string_position_encoding_callback" target="_blank" rel="noopener">http://nodejs.cn/api/fs.html#fs_fs_write_fd_string_position_encoding_callback</a></p></blockquote><p>将 buffer 写入到 fd 指定的文件。</p><p><strong>参数</strong></p><ul><li>fd &lt;integer&gt; 使用fs.open打开成功后返回的文件描述符</li><li>buffer &lt;Buffer&gt; | <typedarray> | &lt;DataView&gt;  Buffer对象</typedarray></li><li>offset &lt;integer&gt; 从缓存区中读取时的初始位置，以字节为单位</li><li>length &lt;integer&gt; 从缓存区中读取数据的字节数</li><li>position &lt;integer&gt; 写入文件初始位置</li><li>callback &lt;Function&gt; 回调函数<ul><li>err &lt;Error&gt; 错误信息</li><li>written &lt;integer&gt; 写入的字节数</li><li>buffer &lt;string&gt; 被读取的缓存区对象</li></ul></li></ul><p><strong>例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">'我爱编程'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"准备打开文件"</span>)</span><br><span class="line"></span><br><span class="line">fs.open(<span class="string">'./mesage.txt'</span>, <span class="string">'w'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, fd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">"打开文件失败"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件描述符："</span>, fd)</span><br><span class="line">    fs.write(fd, buf, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, written, buffer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">"写文件操作失败"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"文件操作成功"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'写入的字节数：'</span>, written)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'buffer：'</span>, buffer)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'被读取的缓存区对象:'</span>,buffer.toString())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Buffer e6 88 91 e7 88 b1 e7 bc 96 e7 a8 8b&gt;</span><br><span class="line">准备打开文件</span><br><span class="line">文件描述符： 3</span><br><span class="line">文件操作成功</span><br><span class="line">写入的字节数： 9</span><br><span class="line">buffer： &lt;Buffer e6 88 91 e7 88 b1 e7 bc 96 e7 a8 8b&gt;</span><br><span class="line">被读取的缓存区对象: 我爱编程</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>mesage.txt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爱编程</span><br></pre></td></tr></table></figure></blockquote><h2 id="fs-fsync-方法确保文件全部写入"><a href="#fs-fsync-方法确保文件全部写入" class="headerlink" title="fs.fsync 方法确保文件全部写入"></a>fs.fsync 方法确保文件全部写入</h2><p>文件读写操作执行完毕后，需要关闭此文件，尤其是在文件排他方式打开的时候。</p><p><strong>close使用方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.close(fd,[callback])</span><br></pre></td></tr></table></figure><p>fd参数值必须为open方法所使用的回调函数中返回的文件描述符。<br>callback为可选参数。</p><p>在使用write方法或writeSync方法在文件中写入数据时，操作系统首先将该部分读到内存中，再把数据写到文件中，当数据读取完时并不代表数据已经写完，因为还有一部分有可能会留在内存缓冲区中，这时用close方法或closeSync方法关闭文件，那么这部分数据就会丢失，这时，可以调用fs模块中的fsync方法对文件进行同步操作，即将内存缓冲区中的剩余数据全部写入文件。</p><p><strong>fsync使用方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.fsync(fd,[callback])</span><br></pre></td></tr></table></figure><p>fd参数值必须为open方法所使用的回调函数中返回的文件描述符。<br>callback为可选参数。</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="string">'我喜爱编程'</span>);</span><br><span class="line"></span><br><span class="line">fs.open(<span class="string">'./msg.txt'</span>,<span class="string">'wx'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">    fs.write(fd,buf,<span class="number">0</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,written,buffer</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(<span class="string">"写入文件失败"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">"写入文件成功"</span>);</span><br><span class="line">        fs.fsync(fd);</span><br><span class="line">        fs.close(fd);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="读取文件状态"><a href="#读取文件状态" class="headerlink" title="读取文件状态"></a>读取文件状态</h2><p>var fs = require(‘fs’);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(<span class="string">'./msg.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,stats</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stats)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Stats {<br>  dev: 3873559124,<br>  mode: 33206,<br>  nlink: 1,<br>  uid: 0,<br>  gid: 0,<br>  rdev: 0,<br>  blksize: undefined,<br>  ino: 3096224743946298,<br>  size: 15,<br>  blocks: undefined,<br>  atimeMs: 1568170744889,<br>  mtimeMs: 1568170744889,<br>  ctimeMs: 1568170744890.2546,<br>  birthtimeMs: 1568165654890.947,<br>  atime: 2019-09-11T02:59:04.889Z,<br>  mtime: 2019-09-11T02:59:04.889Z,<br>  ctime: 2019-09-11T02:59:04.890Z,<br>  birthtime: 2019-09-11T01:34:14.891Z }</p></blockquote><ul><li><p>stats.atime “访问时间” - 上次访问文件数据的时间。</p></li><li><p>stats.mtime “修改时间” - 上次修改文件数据的时间。</p></li><li><p>stats.ctime “更改时间” - 上次更改文件状态（修改索引节点数据）的时间。</p></li><li><p>stats.birthtime “创建时间” - 创建文件的时间。当创建文件时设置一次。</p></li></ul><h2 id="fs-exists-检查文件是否存在"><a href="#fs-exists-检查文件是否存在" class="headerlink" title="fs.exists 检查文件是否存在"></a>fs.exists 检查文件是否存在</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.exists(<span class="string">'./msg.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(exists)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取文件绝对路径"><a href="#获取文件绝对路径" class="headerlink" title="获取文件绝对路径"></a>获取文件绝对路径</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.realpath(<span class="string">'./msg.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,resolvedPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="comment">// 回调函数代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(resolvedPath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="修改文件访问时间及修改时间"><a href="#修改文件访问时间及修改时间" class="headerlink" title="修改文件访问时间及修改时间"></a>修改文件访问时间及修改时间</h2><blockquote><p>fs.utimes(path,atime,mtime,callback)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.utimes(<span class="string">'./msg.txt'</span>,<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(<span class="string">"修改文件时间失败"</span>)</span><br><span class="line">    <span class="comment">// 回调函数代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"修改文件时间成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="修改文件读写权限"><a href="#修改文件读写权限" class="headerlink" title="修改文件读写权限"></a>修改文件读写权限</h2><blockquote><p> fs.chamod(path,mode,callback)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0600代表所有者可以读写，其他人没有任何权限</span></span><br><span class="line">fs.chmod(<span class="string">'./msg.txt'</span>,<span class="number">0600</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(<span class="string">"修改文件权限失败"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">"修改文件权限成功"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>0600 所有者可以读写，其他人没有任何权限</li><li>0644 所有者可读写，其他人只读</li><li>0755 所有者有所有权限，其他人可读可执行</li><li>0740 所有者有所有权限，所有者所在的组只读</li></ul><h2 id="创建文件硬链接"><a href="#创建文件硬链接" class="headerlink" title="创建文件硬链接"></a>创建文件硬链接</h2><blockquote><p>fs.link(srcpath,dstpath,callback)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.link(<span class="string">'./test.txt'</span>,<span class="string">'./test/test2.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(<span class="string">"创建文件硬链接失败"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">"创建文件硬链接成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="删除文件硬链接"><a href="#删除文件硬链接" class="headerlink" title="删除文件硬链接"></a>删除文件硬链接</h2><blockquote><p>fs.unlink(srcpath,dstpath,callback)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.unlink(<span class="string">'./test.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(<span class="string">"删除文件硬链接失败"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">"删除文件硬链接成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a>rmdir 删除空目录</h2><blockquote><p>fs.rmdir(path,callback)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.rmdir(<span class="string">'./c'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(<span class="string">"删除空目录失败"</span>,err);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">"删除空目录成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="watchFile-监听文件或目录"><a href="#watchFile-监听文件或目录" class="headerlink" title="watchFile 监听文件或目录"></a>watchFile 监听文件或目录</h2><blockquote><p>fs.watchFile(filename,[options],listener)</p><ul><li>filename &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;Object&gt;</li><li>persistent &lt;boolean&gt; 默认值: true。</li><li>interval &lt;integer&gt; 默认值: 5007。</li><li>listener &lt;Function&gt;<ul><li>current &lt;fs.Stats&gt;</li><li>previous &lt;fs.Stats&gt;</li></ul></li></ul></blockquote><blockquote><p>监视 filename 的更改。 每当访问文件时都会调用 listener 回调。<br>options 参数可以省略。 如果提供，则它应该是一个对象。 options 对象可以包含一个名为 persistent 的布尔值，指示当文件正在被监视时，进程是否应该继续运行。 options 对象可以指定 interval 属性，指示轮询目标的频率（以毫秒为单位）。<br>listener 有两个参数，当前的 stat 对象和之前的 stat 对象：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.watchFile(<span class="string">'message.text'</span>, (curr, prev) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`当前的最近修改时间是: <span class="subst">$&#123;curr.mtime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`之前的最近修改时间是: <span class="subst">$&#123;prev.mtime&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.watchFile(<span class="string">'./message.txt'</span>,&#123;<span class="attr">persistent</span>:<span class="literal">true</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">curr,prev</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">Date</span>.parse(curr.ctime)==<span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'message.txt文件为'</span>+curr.size+<span class="string">'字节'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 每个一小时监听一次</span></span><br><span class="line">fs.watchFile(<span class="string">'./message.txt'</span>,&#123;<span class="attr">interval</span>:<span class="number">60</span>*<span class="number">60</span>*<span class="number">5000</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">curr,prev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(curr)</span><br><span class="line">    <span class="built_in">console</span>.log(prev)</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听同一个文件</span></span><br><span class="line">fs.watchFile(<span class="string">'./message.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">curr,prev</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">Date</span>.parse(curr.ctime)==<span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'message.txt文件为'</span>+curr.size+<span class="string">'字节'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="unwatchFile-取消监听文件或目录"><a href="#unwatchFile-取消监听文件或目录" class="headerlink" title="unwatchFile 取消监听文件或目录"></a>unwatchFile 取消监听文件或目录</h2><blockquote><p>fs.unwatchFile(filename, listener)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">curr,prev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这里时fn1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">curr,prev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这里时fn2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.watchFile(<span class="string">'./message.txt'</span>,fn1);</span><br><span class="line">fs.watchFile(<span class="string">'./message.txt'</span>,fn2);</span><br><span class="line">fs.unwatchFile(<span class="string">'./message.txt'</span>,fn1);</span><br></pre></td></tr></table></figure><blockquote><p>$ node app.9.js<br>  这里时fn2</p></blockquote><h2 id="watch-监视文件"><a href="#watch-监视文件" class="headerlink" title="watch 监视文件"></a>watch 监视文件</h2><blockquote><p>fs.watch(filename,[options] [listener])<br>var watcher = fs.watch(filename,[options] [listener])</p><ul><li>filename &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt;</li><li>options &lt;string&gt; | &lt;Object&gt;</li><li>persistent &lt;boolean&gt; 指示如果文件已正被监视，进程是否应继续运行。默认值: true。</li><li>recursive &lt;boolean&gt; 指示应该监视所有子目录，还是仅监视当前目录。这适用于监视目录时，并且仅适用于受支持的平台（参阅注意事项）。默认值: false。</li><li>encoding &lt;string&gt; 指定用于传给监听器的文件名的字符编码。默认值: ‘utf8’。</li><li>listener &lt;Function&gt; | &lt;undefined&gt; 默认值: undefined。<br>  eventType &lt;string&gt;<br>  filename &lt;string&gt; | &lt;Buffer&gt;</li><li>返回: &lt;fs.FSWatcher&gt;</li></ul></blockquote><p>fs.watch：<a href="http://nodejs.cn/api/fs.html#fs_fs_watch_filename_options_listener" target="_blank" rel="noopener">http://nodejs.cn/api/fs.html#fs_fs_watch_filename_options_listener</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.watch(<span class="string">'./message.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event,filename</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">    <span class="built_in">console</span>.log(filename)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> watcher = fs.watch(<span class="string">'./msg.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event,filename</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">    <span class="built_in">console</span>.log(filename)</span><br><span class="line">    watcher.close(); <span class="comment">// 触发事件后停止监视文件停止程序运行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js：console对象</title>
      <link href="/back-end/b83ce424.html"/>
      <url>/back-end/b83ce424.html</url>
      
        <content type="html"><![CDATA[<h2 id="标准输出流"><a href="#标准输出流" class="headerlink" title="标准输出流"></a>标准输出流</h2><p>conosole.log方法用于进行标准输出流的输出，即在控制台中显示一行字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello node.js"</span>)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>标准输出流将输出到控制台</p><blockquote><p>hello node.js</p></blockquote><h2 id="重定向标准输出流"><a href="#重定向标准输出流" class="headerlink" title="重定向标准输出流"></a>重定向标准输出流</h2><p>将app.js输出的字符串输出到info.log文件中，<strong>（1代表重定向标准输出流）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js 1&gt;info.log</span><br></pre></td></tr></table></figure><p>如果没有info.log，它会自动创建并写入。</p><p>打开info.log可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello node.js</span><br></pre></td></tr></table></figure><h2 id="标准错误输出流重定向输出"><a href="#标准错误输出流重定向输出" class="headerlink" title="标准错误输出流重定向输出"></a>标准错误输出流重定向输出</h2><p>将app.js错误信息输出的字符串输出到error.log文件中，<strong>（2代表重定向标准错误输出流）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"This is a test"</span>)</span><br><span class="line"><span class="comment">// 或者输出一个未定义的变量</span></span><br><span class="line"><span class="comment">// conosole.log(name)</span></span><br></pre></td></tr></table></figure><p>如果没有error.log，它会自动创建并写入。</p><p>打开error.log可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node : This is a test</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ node app.js 2&gt;error.log</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (This is a test:String) [], RemoteException</span><br><span class="line">    + FullyQualifiedErrorId : NativeCommandError</span><br></pre></td></tr></table></figure><h2 id="统计一段代码执行时间"><a href="#统计一段代码执行时间" class="headerlink" title="统计一段代码执行时间"></a>统计一段代码执行时间</h2><p>console.time(label)<br>console.timeEnd(label)</p><p>这两个方法使用一个参数，并且<strong>这个两个方法使用的参数字符串必须相同</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">var</span> q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i++;i&lt;<span class="number">20</span>)&#123;</span><br><span class="line">    q+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>test: 0.086ms</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档、书籍、网站分享</title>
      <link href="/share/74bd31aa.html"/>
      <url>/share/74bd31aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="node-js-书籍"><a href="#node-js-书籍" class="headerlink" title="node.js 书籍"></a>node.js 书籍</h3><ol><li><a href="https://book.douban.com/subject/25892704/" target="_blank" rel="noopener">《node.js权威指南》</a></li></ol><p><img src="/images/s27289121.jpg" alt="node.js权威指南"></p><p>作者: 陆凌牛<br>出版社: 机械工业出版社<br>出版年: 2014-4-1</p><p>百度云盘：<a href="https://pan.baidu.com/s/1vvYZfVnqn98BdVK39itMnw" target="_blank" rel="noopener">https://pan.baidu.com/s/1vvYZfVnqn98BdVK39itMnw</a><br>提取码：d40u</p><hr><h3 id="node-js-文章、文档"><a href="#node-js-文章、文档" class="headerlink" title="node.js 文章、文档"></a>node.js 文章、文档</h3><ol><li><p>Node.js 中文网文档<br>文档地址：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a></p></li><li><p>node.js fs.open 和 fs.write 读取文件和改写文件<br>文章地址： <a href="https://www.cnblogs.com/wushanbao/p/7003308.html" target="_blank" rel="noopener">https://www.cnblogs.com/wushanbao/p/7003308.html</a></p></li><li><p>七天学会NodeJS<br>文档地址：<a href="https://nqdeng.github.io/7-days-nodejs/#1" target="_blank" rel="noopener">https://nqdeng.github.io/7-days-nodejs/#1</a></p></li></ol><h2 id="网站分享"><a href="#网站分享" class="headerlink" title="网站分享"></a>网站分享</h2><ol><li><p>廖雪峰的官方网站<br>网站地址：<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/</a></p></li><li><p>Java知识分享网<br>网站地址：<a href="http://www.java1234.com/a/javabook/webbase/" target="_blank" rel="noopener">http://www.java1234.com/a/javabook/webbase/</a><br>这个网站上有很多免费pdf书籍下载。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习书籍 </tag>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fis3前端工程构建工具</title>
      <link href="/front-end/664fd9e5.html"/>
      <url>/front-end/664fd9e5.html</url>
      
        <content type="html"><![CDATA[<p>昨天尝试webapck使用ejs模板配置公用组件，网上关于webpack使用ejs配置公用组件的教程太少了，有几个教程我尝试了，都以失败告终。</p><p>ejs官网：<a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">https://ejs.bootcss.com/</a></p><p>开发原生多页面项目，不同于使用vue，repeat这些框架，很多重复的部件，公用头部、底部，导航等等，管理起来太费时间了，好像glup也可以做到公用组件，但是不想要glup。</p><p><a href="http://fis.baidu.com" target="_blank" rel="noopener">fis3</a>是一个不错的选择，因为简单容易使用，我只针对使用它的一个功能也足够了。</p><p>在html中嵌入资源：<a href="http://fis.baidu.com/fis3/docs/user-dev/inline.html" target="_blank" rel="noopener">http://fis.baidu.com/fis3/docs/user-dev/inline.html</a></p><p>html中嵌入页面文件</p><p>源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"head.html?__inline"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// head.html (公共组件)</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置好一个demo，有点贪心加了其他功能进去，github:<a href="https://github.com/ywc150148/fis-demo" target="_blank" rel="noopener">https://github.com/ywc150148/fis-demo</a></p><p>但是好像挺少人使用fis3，配置sass失败，找不到解决方法。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fis3 </tag>
            
            <tag> 前端工程构建工具 </tag>
            
            <tag> 前端公用组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo及next主题使用遇到的问题</title>
      <link href="/mixture/b13ba7b7.html"/>
      <url>/mixture/b13ba7b7.html</url>
      
        <content type="html"><![CDATA[<p>我在使用hexo和next主题，期间遇到问题的解决方法一一罗列：</p><h2 id="安装使用-next-主题"><a href="#安装使用-next-主题" class="headerlink" title="安装使用 next 主题"></a>安装使用 next 主题</h2><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><h2 id="Hexo使用不蒜子统计功能失效问题解决"><a href="#Hexo使用不蒜子统计功能失效问题解决" class="headerlink" title="Hexo使用不蒜子统计功能失效问题解决"></a>Hexo使用不蒜子统计功能失效问题解决</h2><p><a href="Hexo使用不蒜子统计功能失效问题解决">https://www.jianshu.com/p/089762f90e1c</a></p><h2 id="hexo博客添加评论神器—valine"><a href="#hexo博客添加评论神器—valine" class="headerlink" title="hexo博客添加评论神器—valine"></a>hexo博客添加评论神器—valine</h2><p><a href="https://blog.csdn.net/qq_40265501/article/details/80019508" target="_blank" rel="noopener">https://blog.csdn.net/qq_40265501/article/details/80019508</a></p><h2 id="Hexo-Next-主题中添加本地搜索功能"><a href="#Hexo-Next-主题中添加本地搜索功能" class="headerlink" title="Hexo Next 主题中添加本地搜索功能"></a>Hexo Next 主题中添加本地搜索功能</h2><p><a href="https://blog.csdn.net/lijing742180/article/details/87970909" target="_blank" rel="noopener">https://blog.csdn.net/lijing742180/article/details/87970909</a></p><h2 id="Hexo之next主题设置首页不显示全文-只显示预览"><a href="#Hexo之next主题设置首页不显示全文-只显示预览" class="headerlink" title="Hexo之next主题设置首页不显示全文(只显示预览)"></a>Hexo之next主题设置首页不显示全文(只显示预览)</h2><p><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">https://www.jianshu.com/p/393d067dba8d</a></p><h2 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h2><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders.html</a></p><h2 id="hexo-github上传图片到博客-这个会创建很多文件夹，我不使用"><a href="#hexo-github上传图片到博客-这个会创建很多文件夹，我不使用" class="headerlink" title="hexo+github上传图片到博客 (这个会创建很多文件夹，我不使用)"></a>hexo+github上传图片到博客 (这个会创建很多文件夹，我不使用)</h2><p><a href="https://www.jianshu.com/p/8d28027fec76" target="_blank" rel="noopener">https://www.jianshu.com/p/8d28027fec76</a></p><h2 id="建议把图片压缩再放到source文件夹"><a href="#建议把图片压缩再放到source文件夹" class="headerlink" title="建议把图片压缩再放到source文件夹"></a>建议把图片压缩再放到<code>source</code>文件夹</h2><p>图片在线压缩：<a href="https://www.tuhaokuai.com/" target="_blank" rel="noopener">https://www.tuhaokuai.com/</a></p><h2 id="hexo禁用特定文章的评论"><a href="#hexo禁用特定文章的评论" class="headerlink" title="hexo禁用特定文章的评论"></a>hexo禁用特定文章的评论</h2><p><a href="https://blog.csdn.net/jiluben/article/details/40868981" target="_blank" rel="noopener">https://blog.csdn.net/jiluben/article/details/40868981</a></p>]]></content>
      
      
      <categories>
          
          <category> 混合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo next 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/uncategorized/4a17b156.html"/>
      <url>/uncategorized/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="启动-Hexo-本地站点，并开启调试模式"><a href="#启动-Hexo-本地站点，并开启调试模式" class="headerlink" title="启动 Hexo 本地站点，并开启调试模式"></a>启动 Hexo 本地站点，并开启调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure><h3 id="清除缓存、生产并部署到主分支"><a href="#清除缓存、生产并部署到主分支" class="headerlink" title="清除缓存、生产并部署到主分支"></a>清除缓存、生产并部署到主分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo jquery 加载失败问题</title>
      <link href="/mixture/9e5800d1.html"/>
      <url>/mixture/9e5800d1.html</url>
      
        <content type="html"><![CDATA[<p>昨天部署上线hexo，想在手机上体验一番，但是奈何进度条一直显示加载状态，而且导航栏按钮点击无效。</p><p>打开pc谷歌浏览器控制台，提示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET https://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js net::ERR_CONNECTION_TIMED_OUT</span><br><span class="line">jquery.fancybox.pack.js:46 Uncaught ReferenceError: jQuery is not defined</span><br><span class="line">    at jquery.fancybox.pack.js:46</span><br><span class="line">(anonymous) @ jquery.fancybox.pack.js:46</span><br><span class="line">script.js:137 Uncaught ReferenceError: jQuery is not defined</span><br><span class="line">    at script.js:137</span><br></pre></td></tr></table></figure><p>打开themes\landscape\layout_partial\after-footer.ejs：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;//cdn.bootcss.com/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>换成国内cdn就解决了。</p>]]></content>
      
      
      <categories>
          
          <category> 混合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-abbrlink 将中文标题转字母数字</title>
      <link href="/mixture/7af33d81.html"/>
      <url>/mixture/7af33d81.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a></p><h2 id="安装-hexo-abbrlink"><a href="#安装-hexo-abbrlink" class="headerlink" title="安装 hexo-abbrlink"></a>安装 hexo-abbrlink</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>如果提示安装eslin、babel-eslint：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint babel-eslint -D</span><br></pre></td></tr></table></figure><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 _config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">permalink: :category/:abbrlink.html</span><br><span class="line">permalink_defaults: en</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">    rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><p>4种组合：<br>crc16 &amp; hex<br><a href="https://post.zz173.com/posts/66c8.html" target="_blank" rel="noopener">https://post.zz173.com/posts/66c8.html</a></p><p>crc16 &amp; dec<br><a href="https://post.zz173.com/posts/65535.html" target="_blank" rel="noopener">https://post.zz173.com/posts/65535.html</a></p><p>crc32 &amp; hex<br><a href="https://post.zz173.com/posts/8ddf18fb.html" target="_blank" rel="noopener">https://post.zz173.com/posts/8ddf18fb.html</a></p><p>crc32 &amp; dec<br><a href="https://post.zz173.com/posts/1690090958.html" target="_blank" rel="noopener">https://post.zz173.com/posts/1690090958.html</a></p><p><a href="https://leafjame.github.io/posts/4084686398.html" target="_blank" rel="noopener">参考：https://leafjame.github.io/posts/4084686398.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 混合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 中文标题转字母数字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分类名与路径名称分别设置</title>
      <link href="/mixture/a787eed.html"/>
      <url>/mixture/a787eed.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、修改永久连接格式"><a href="#1、修改永久连接格式" class="headerlink" title="1、修改永久连接格式"></a>1、修改永久连接格式</h2><p>我把文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式修改了成<code>:category/:title.html</code></p><p><code>_config.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :category/:title.html</span><br><span class="line">permalink_defaults: en</span><br></pre></td></tr></table></figure><h2 id="2、设置分类"><a href="#2、设置分类" class="headerlink" title="2、设置分类"></a>2、设置分类</h2><p>添加设置了文章分类<code>前端</code>。</p><p>此时路径为：<a href="http://localhost:4000/前端/文章标题.html" target="_blank" rel="noopener">http://localhost:4000/前端/文章标题.html</a></p><p>我要url分类路径显示英文。</p><h2 id="3、修改category-map"><a href="#3、修改category-map" class="headerlink" title="3、修改category_map"></a>3、修改category_map</h2><p><code>_config.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">        前端: front-end</span><br><span class="line">tag_map:</span><br></pre></td></tr></table></figure><p>此时路径为：<a href="http://localhost:4000/front-end/文章标题.html" target="_blank" rel="noopener">http://localhost:4000/front-end/文章标题.html</a></p><p>标签同理。</p>]]></content>
      
      
      <categories>
          
          <category> 混合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
